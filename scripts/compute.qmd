---
title: Compute 
---

## Local Machine 

### Oh My Zsh
I like to install Oh My Zsh on my local machine for autocomplete etc 

- [OhMyZsh](https://github.com/ohmyzsh/ohmyzsh): Mange your zsh configuration 
- [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions/)

## High Performance Computing

[Get Started with Wynton](https://wynton.ucsf.edu/hpc/get-started/access-cluster.html)
[Job Submission](https://wynton.ucsf.edu/hpc/scheduler/submit-jobs.html)
[File Transfers](https://wynton.ucsf.edu/hpc/transfers/files-and-directories.html)


`ssh sjfandrews@log1.wynton.ucsf.edu`

`/wynton/group/andrews`


[Getting started with HPC](https://code.sbamin.com/hpc/)


### Mamba 

Conda and Mamba are tools that help you install and manage software packages and their dependencies, which are other packages that a software needs to function properly. They're especially useful when different projects need different versions of the same software package. Conda, created by Anaconda, Inc., is well-known for its ability to create isolated spaces (called environments) for your projects, ensuring that the software packages of one project don't interfere with those of another. Mamba is a faster version of Conda, doing the same job but more quickly. Both of them support many programming languages, making them versatile tools for managing software in your projects.

Install [Mambaforge](https://github.com/conda-forge/miniforge#mambaforge) in your home directory

### Cookiecutter 
A command-line utility that creates projects from cookiecutters (project templates), e.g. creating a Python package project from a Python package project template.

Install [cookiecutter](https://cookiecutter.readthedocs.io/en/stable/installation.html) using mamba

### Snakemake 

Snakemake is a versatile, Python-based workflow management system that enables the creation of reproducible and scalable data analyses. It operates on the principle of defining "rules" that explicitly state how to produce output files from input files. These rules, which can incorporate shell commands or scripts in any language, are written in a Snakefile. Snakemake takes care of determining the correct order of rule execution based on their dependencies. It also supports parallelization of jobs, making it suitable for high-throughput computations. Furthermore, Snakemake workflows are self-documenting, meaning they can serve as a record of your data analysis, enhancing reproducibility. It's widely used in bioinformatics, but its application can extend to any field that involves pipeline-based data analysis.

Install [Snakemake](https://snakemake.readthedocs.io/en/stable/getting_started/installation.html#) using mamba

Install [sge](https://github.com/snakemake-profiles/sge) snakemake profile using cookiecutter

```
# Print rulegraph 
snakemake --rulegraph | dot -Tpdf > images/dag.pdf

# Install conda/singularity envs, dont run workflow
snakemake --use-conda --conda-create-envs-only
```
### Git on UCSF HPC server Wynton

$ ssh <your wynton username>@log1.wynton.ucsf.edu

$ cd /wynton/group/andrews/users/<your wynton username>

# Check your location
$ pwd
/wynton/group/andrews/users/<your wynton username>

# You can’t use git on log1, so switch to dev node
$ ssh dev2  

# You can't use `git clone' yet. You need an authorization key.
$ git clone https://github.com/AndrewsLabUCSF/CAIDE_APOE
failure

$ ssh-keygen -t ed25519 -C <your email address associated with GitHub>
Generating public/private ed25519 key pair.
Enter file in which to save the key: (You don’t need to create this file “key_pair” beforehand)

$ /wynton/group/andrews/users/<your wynton username>/key_pair
Enter passphrase (empty for no passphrase): 
(optional; You can just hit return)
Enter same passphrase again:
(optional; You can just hit return)
Your identification has been saved in /wynton/group/andrews/users/<your wynton username>/key_pair.
Your public key has been saved in /wynton/group/andrews/users/<your wynton username>/key_pair.pub.
The key fingerprint is:
<your key fingerprint> <your email address associated with GitHub>

# Open a connection to your authentication agent
$ eval `ssh-agent -s'
Agent pid (new number each time)

# Move your key_pair and key_pair.pub files into a new folder called ".ssh"
$ mkdir .ssh
$ mv key_pair .ssh
$ mv key_pair.pub .ssh

# ssh-add your files and assign the necessary permissions
$ ssh-add /wynton/group/andrews/users/<your wynton username>/.ssh/key_pair
$ chmod 600 /wynton/group/andrews/users/<your wynton username>/.ssh/key_pair.pub
$ ssh-add /wynton/group/andrews/users/<your wynton username>/.ssh/key_pair.pub

# Copy your key_pair.pub file
$ cat /wynton/group/andrews/users/<your wynton username>/.ssh/key_pair.pub
<your key> <your email address associated with GitHub>

# Copy the contents of key_pair.pub in order to paste them into the following location: Log onto GitHub and click on your personal account, then click on “settings”. Click on “SSH and GPG keys”. Click on “New SSH key” and paste the entire contents of key_pair.pub (including your email address associated with GitHub) into the new “Authentication Key”. Save this key.

$ ssh -T git@github.com
. . . Are you sure you want to continue connecting (yes/no)? 
$ yes

# Check your location
$ pwd
/wynton/group/andrews/users/<your wynton username>

# On GitHub
# Click on “<> Code” in green on the desired repository page. Click on SSH. Copy the code in the box to use in your git clone command (see below).

$ git clone git@github.com:AndrewsLabUCSF/CAIDE_APOE.git
# Success!

# Logging out and logging back into Wynton
$ ssh <your wynton username>@log1.wynton.ucsf.edu
$ ssh dev2 (or dev1, etc)

# Open a connection to your authentication agent
$ eval `ssh-agent -s'
Agent pid (new number each time)

# Add your key pair
$ ssh-add /wynton/group/andrews/users/evelasquez/.ssh/key_pair
$ ssh-add /wynton/group/andrews/users/evelasquez/.ssh/key_pair.pub
$ ssh -T git@github.com
Hi <GitHub username>! You've successfully authenticated, but GitHub does not provide shell access.

# Push some previously committed files
$ git push
Success!
